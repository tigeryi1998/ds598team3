{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Team3df"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"GitHub_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHub'"
		},
		"GitHub1_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHub1'"
		},
		"HttpServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'HttpServer1'"
		},
		"NHTSA_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'NHTSA'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ds598team3.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://Team3KeyVault.vault.azure.net/"
		},
		"Earthquake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://earthquake.usgs.gov/fdsnws/event/1/"
		},
		"GitHub_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "tigeryi1998"
		},
		"GitHub1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "azthorp"
		},
		"HistoricalPollution_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": " http://api.openweathermap.org/"
		},
		"HistoricalPollution_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Team3"
		},
		"HistoricalWeather_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org/"
		},
		"HistoricalWeather_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Team3"
		},
		"HttpServer1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://mbta-massdot.opendata.arcgis.com"
		},
		"HttpServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "team3"
		},
		"NHTSA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://static.nhtsa.gov"
		},
		"NHTSA_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "team_3"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalPollution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://Team3KeyVault.vault.azure.net/secrets/OpenWeatherKey?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": " https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "HistoricalPollutionIngest",
								"type": "DatasetReference",
								"parameters": {
									"lat": 42.36,
									"lon": 71.06,
									"appid": "@activity('Web1').output.value",
									"Start": 1701406800,
									"End": 1733029200
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AirPollution",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Start": {
						"type": "int",
						"defaultValue": 1701406800
					},
					"End": {
						"type": "int",
						"defaultValue": 1733029200
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HistoricalPollutionIngest')]",
				"[concat(variables('factoryId'), '/datasets/AirPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalWeather')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://Team3KeyVault.vault.azure.net/secrets/OpenWeatherKey?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": " https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.DateRange",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "HistoricalPollutionIngest",
											"type": "DatasetReference",
											"parameters": {
												"lat": 42.36,
												"lon": 71.06,
												"appid": "@activity('Web1').output.value",
												"Start": "@item().start",
												"End": "@item().end",
												"dataType": "hour"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "HistoricalWeather",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DateRange": {
						"type": "array",
						"defaultValue": [
							{
								"start": "1701406800",
								"end": "1702011600"
							},
							{
								"start": "1702011600",
								"end": "1702616400"
							},
							{
								"start": "1702616400",
								"end": "1703221200"
							},
							{
								"start": "1703221200",
								"end": "1703826000"
							},
							{
								"start": "1703826000",
								"end": "1704430800"
							},
							{
								"start": "1704430800",
								"end": "1705035600"
							},
							{
								"start": "1705035600",
								"end": "1705640400"
							},
							{
								"start": "1705640400",
								"end": "1706245200"
							},
							{
								"start": "1706245200",
								"end": "1706850000"
							},
							{
								"start": "1706850000",
								"end": "1707454800"
							},
							{
								"start": "1707454800",
								"end": "1708059600"
							},
							{
								"start": "1708059600",
								"end": "1708664400"
							},
							{
								"start": "1708664400",
								"end": "1709269200"
							},
							{
								"start": "1709269200",
								"end": "1709874000"
							},
							{
								"start": "1709874000",
								"end": "1710478800"
							},
							{
								"start": "1710478800",
								"end": "1711083600"
							},
							{
								"start": "1711083600",
								"end": "1711688400"
							},
							{
								"start": "1711688400",
								"end": "1712293200"
							},
							{
								"start": "1712293200",
								"end": "1712898000"
							},
							{
								"start": "1712898000",
								"end": "1713502800"
							},
							{
								"start": "1713502800",
								"end": "1714107600"
							},
							{
								"start": "1714107600",
								"end": "1714712400"
							},
							{
								"start": "1714712400",
								"end": "1715317200"
							},
							{
								"start": "1715317200",
								"end": "1715922000"
							},
							{
								"start": "1715922000",
								"end": "1716526800"
							},
							{
								"start": "1716526800",
								"end": "1717131600"
							},
							{
								"start": "1717131600",
								"end": "1717736400"
							},
							{
								"start": "1717736400",
								"end": "1718341200"
							},
							{
								"start": "1718341200",
								"end": "1718946000"
							},
							{
								"start": "1718946000",
								"end": "1719550800"
							},
							{
								"start": "1719550800",
								"end": "1720155600"
							},
							{
								"start": "1720155600",
								"end": "1720760400"
							},
							{
								"start": "1720760400",
								"end": "1721365200"
							},
							{
								"start": "1721365200",
								"end": "1721970000"
							},
							{
								"start": "1721970000",
								"end": "1722574800"
							},
							{
								"start": "1722574800",
								"end": "1723179600"
							},
							{
								"start": "1723179600",
								"end": "1723784400"
							},
							{
								"start": "1723784400",
								"end": "1724389200"
							},
							{
								"start": "1724389200",
								"end": "1724994000"
							},
							{
								"start": "1724994000",
								"end": "1725598800"
							},
							{
								"start": "1725598800",
								"end": "1726203600"
							},
							{
								"start": "1726203600",
								"end": "1726808400"
							},
							{
								"start": "1726808400",
								"end": "1727413200"
							},
							{
								"start": "1727413200",
								"end": "1728018000"
							},
							{
								"start": "1728018000",
								"end": "1728622800"
							},
							{
								"start": "1728622800",
								"end": "1729227600"
							},
							{
								"start": "1729227600",
								"end": "1729832400"
							},
							{
								"start": "1729832400",
								"end": "1730437200"
							},
							{
								"start": "1730437200",
								"end": "1731042000"
							},
							{
								"start": "1731042000",
								"end": "1731646800"
							},
							{
								"start": "1731646800",
								"end": "1732251600"
							},
							{
								"start": "1732251600",
								"end": "1732856400"
							},
							{
								"start": "1732856400",
								"end": "1733029200"
							}
						]
					}
				},
				"variables": {
					"DateRange": {
						"type": "Array",
						"defaultValue": [
							{
								"start": "1733029200",
								"end": "1732424400"
							},
							{
								"start": "1732424400",
								"end": "1731819600"
							},
							{
								"start": "1731819600",
								"end": "1731214800"
							},
							{
								"start": "1731214800",
								"end": "1730610000"
							},
							{
								"start": "1730610000",
								"end": "1730005200"
							},
							{
								"start": "1730005200",
								"end": "1729400400"
							},
							{
								"start": "1729400400",
								"end": "1728795600"
							},
							{
								"start": "1728795600",
								"end": "1728190800"
							},
							{
								"start": "1728190800",
								"end": "1727586000"
							},
							{
								"start": "1727586000",
								"end": "1726981200"
							},
							{
								"start": "1726981200",
								"end": "1726376400"
							},
							{
								"start": "1726376400",
								"end": "1725771600"
							},
							{
								"start": "1725771600",
								"end": "1725166800"
							},
							{
								"start": "1725166800",
								"end": "1724562000"
							},
							{
								"start": "1724562000",
								"end": "1723957200"
							},
							{
								"start": "1723957200",
								"end": "1723352400"
							},
							{
								"start": "1723352400",
								"end": "1722747600"
							},
							{
								"start": "1722747600",
								"end": "1722142800"
							},
							{
								"start": "1722142800",
								"end": "1721538000"
							},
							{
								"start": "1721538000",
								"end": "1720933200"
							},
							{
								"start": "1720933200",
								"end": "1720328400"
							},
							{
								"start": "1720328400",
								"end": "1719723600"
							},
							{
								"start": "1719723600",
								"end": "1719118800"
							},
							{
								"start": "1719118800",
								"end": "1718514000"
							},
							{
								"start": "1718514000",
								"end": "1717909200"
							},
							{
								"start": "1717909200",
								"end": "1717304400"
							},
							{
								"start": "1717304400",
								"end": "1716699600"
							},
							{
								"start": "1716699600",
								"end": "1716094800"
							},
							{
								"start": "1716094800",
								"end": "1715490000"
							},
							{
								"start": "1715490000",
								"end": "1714885200"
							},
							{
								"start": "1714885200",
								"end": "1714280400"
							},
							{
								"start": "1714280400",
								"end": "1713675600"
							},
							{
								"start": "1713675600",
								"end": "1713070800"
							},
							{
								"start": "1713070800",
								"end": "1712466000"
							},
							{
								"start": "1712466000",
								"end": "1711861200"
							},
							{
								"start": "1711861200",
								"end": "1711256400"
							},
							{
								"start": "1711256400",
								"end": "1710651600"
							},
							{
								"start": "1710651600",
								"end": "1710046800"
							},
							{
								"start": "1710046800",
								"end": "1709442000"
							},
							{
								"start": "1709442000",
								"end": "1708837200"
							},
							{
								"start": "1708837200",
								"end": "1708232400"
							},
							{
								"start": "1708232400",
								"end": "1707627600"
							},
							{
								"start": "1707627600",
								"end": "1707022800"
							},
							{
								"start": "1707022800",
								"end": "1706418000"
							},
							{
								"start": "1706418000",
								"end": "1705813200"
							},
							{
								"start": "1705813200",
								"end": "1705208400"
							},
							{
								"start": "1705208400",
								"end": "1704603600"
							},
							{
								"start": "1704603600",
								"end": "1703998800"
							},
							{
								"start": "1703998800",
								"end": "1703394000"
							},
							{
								"start": "1703394000",
								"end": "1702789200"
							},
							{
								"start": "1702789200",
								"end": "1702184400"
							},
							{
								"start": "1702184400",
								"end": "1701579600"
							}
						]
					},
					"endDate": {
						"type": "String"
					},
					"startDate": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HistoricalPollutionIngest')]",
				"[concat(variables('factoryId'), '/datasets/HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Preprocess_Air_Pollution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Air_Pollution_Historical",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Air_Pollution_Historical')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Preprocess_historical_weather')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Weather_Historical",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Weather_Historical')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AirPollution')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/Weather/UpdatedHistoricalWeather",
						"fileSystem": "data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"coord": {
							"type": "object",
							"properties": {
								"lon": {
									"type": "number"
								},
								"lat": {
									"type": "number"
								}
							}
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"main": {
										"type": "object",
										"properties": {
											"aqi": {
												"type": "integer"
											}
										}
									},
									"components": {
										"type": "object",
										"properties": {
											"co": {
												"type": "number"
											},
											"no": {
												"type": "integer"
											},
											"no2": {
												"type": "number"
											},
											"o3": {
												"type": "number"
											},
											"so2": {
												"type": "number"
											},
											"pm2_5": {
												"type": "number"
											},
											"pm10": {
												"type": "number"
											},
											"nh3": {
												"type": "number"
											}
										}
									},
									"dt": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalPollutionIngest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HistoricalPollution",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float",
						"defaultValue": 42.36
					},
					"lon": {
						"type": "float",
						"defaultValue": 71.06
					},
					"appid": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					},
					"Start": {
						"type": "int",
						"defaultValue": 1701406800
					},
					"End": {
						"type": "int",
						"defaultValue": 1733029200
					},
					"dataType": {
						"type": "string",
						"defaultValue": "hour"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HistoricalPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalWeather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/Weather/UpdatedHistoricalWeather",
						"fileSystem": "data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									},
									"rain": {
										"type": "object",
										"properties": {
											"1h": {
												"type": "number"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalWeatherIngest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HistoricalWeather",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dataType": {
						"type": "string",
						"defaultValue": "hour"
					},
					"lat": {
						"type": "float",
						"defaultValue": 42.36
					},
					"lon": {
						"type": "float",
						"defaultValue": 71.06
					},
					"appid": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					},
					"start": {
						"type": "string",
						"defaultValue": "@item().start"
					},
					"end": {
						"type": "string",
						"defaultValue": "@item().end"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HistoricalWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									},
									"rain": {
										"type": "object",
										"properties": {
											"1h": {
												"type": "number"
											}
										}
									}
								}
							}
						},
						"data": {
							"type": "object",
							"properties": {
								"stations": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"station_id": {
												"type": "string"
											},
											"ebikes": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"make_and_model": {
															"type": "string"
														},
														"displayed_number": {
															"type": "string"
														},
														"range_estimate": {
															"type": "object",
															"properties": {
																"conservative_range_miles": {
																	"type": "number"
																},
																"estimated_range_miles": {
																	"type": "number"
																}
															}
														},
														"rideable_id": {
															"type": "string"
														},
														"is_lbs_internal_rideable": {
															"type": "boolean"
														},
														"docking_capability": {
															"type": "integer"
														},
														"battery_charge_percentage": {
															"type": "integer"
														}
													}
												}
											}
										}
									}
								},
								"en": {
									"type": "object",
									"properties": {
										"feeds": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"name": {
														"type": "string"
													},
													"url": {
														"type": "string"
													}
												}
											}
										}
									}
								},
								"fr": {
									"type": "object",
									"properties": {
										"feeds": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"name": {
														"type": "string"
													},
													"url": {
														"type": "string"
													}
												}
											}
										}
									}
								},
								"es": {
									"type": "object",
									"properties": {
										"feeds": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"name": {
														"type": "string"
													},
													"url": {
														"type": "string"
													}
												}
											}
										}
									}
								},
								"plans": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"description": {
												"type": "string"
											},
											"price": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"currency": {
												"type": "string"
											},
											"is_taxable": {
												"type": "boolean"
											},
											"plan_id": {
												"type": "string"
											}
										}
									}
								},
								"regions": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"region_id": {
												"type": "string"
											},
											"name": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"last_updated": {
							"type": "integer"
						},
						"ttl": {
							"type": "integer"
						},
						"version": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ride_id",
						"type": "String"
					},
					{
						"name": "rideable_type",
						"type": "String"
					},
					{
						"name": "started_at",
						"type": "String"
					},
					{
						"name": "ended_at",
						"type": "String"
					},
					{
						"name": "start_station_name",
						"type": "String"
					},
					{
						"name": "start_station_id",
						"type": "String"
					},
					{
						"name": "end_station_name",
						"type": "String"
					},
					{
						"name": "end_station_id",
						"type": "String"
					},
					{
						"name": "start_lat",
						"type": "String"
					},
					{
						"name": "start_lng",
						"type": "String"
					},
					{
						"name": "end_lat",
						"type": "String"
					},
					{
						"name": "end_lng",
						"type": "String"
					},
					{
						"name": "member_casual",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransportationData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "/datasets/80a379ebaa374cfd836ca4d3880ceda4_0/explore"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": null
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_pollution')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_weather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ride_id",
						"type": "UTF8"
					},
					{
						"name": "rideable_type",
						"type": "UTF8"
					},
					{
						"name": "started_at",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "ended_at",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "start_station_name",
						"type": "UTF8"
					},
					{
						"name": "start_station_id",
						"type": "UTF8"
					},
					{
						"name": "end_station_name",
						"type": "UTF8"
					},
					{
						"name": "end_station_id",
						"type": "UTF8"
					},
					{
						"name": "start_lat",
						"type": "DOUBLE"
					},
					{
						"name": "start_lng",
						"type": "DOUBLE"
					},
					{
						"name": "end_lat",
						"type": "DOUBLE"
					},
					{
						"name": "end_lng",
						"type": "DOUBLE"
					},
					{
						"name": "member_casual",
						"type": "UTF8"
					},
					{
						"name": "is_bike_lost",
						"type": "INT64"
					},
					{
						"name": "is_return_to_dock",
						"type": "INT64"
					},
					{
						"name": "is_start_from_dock",
						"type": "INT64"
					},
					{
						"name": "distance",
						"type": "DOUBLE"
					},
					{
						"name": "duration",
						"type": "DOUBLE"
					},
					{
						"name": "speed_ms",
						"type": "DOUBLE"
					},
					{
						"name": "speed_kmh",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weathersample')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "example_weather.json",
						"folderPath": "bronze/Weather",
						"fileSystem": "data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									},
									"rain": {
										"type": "object",
										"properties": {
											"1h": {
												"type": "number"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Earthquake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Earthquake_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHub')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHub_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHub_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDEyQTkxNzBGLTE0OEItNDVEQi1BNkU4LUZFNjhBMTM3NTY0RV84N2YzZGU0Zi01ZDM3LTRhOWQtYTA5ZC1iZmVhYThlOTc0NTYiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHub1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHub1_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHub1_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDEyQTkxNzBGLTE0OEItNDVEQi1BNkU4LUZFNjhBMTM3NTY0RV9lYWQ0MWY3Zi1mNTVmLTQ1OWItOGFmNy0yZDFjNGM1N2E0OWUiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalPollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HistoricalPollution_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('HistoricalPollution_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "OpenWeatherKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HistoricalWeather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HistoricalWeather_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('HistoricalWeather_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "OpenWeatherKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('HttpServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('HttpServer1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NHTSA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('NHTSA_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('NHTSA_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('NHTSA_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Air_Pollution_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AirPollution",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver_pollution",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lon as double, lat as double),",
						"          list as (main as (aqi as integer), components as (co as double, no as integer, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 foldDown(unroll(list, list),",
						"     mapColumn(",
						"          lon = coord.lon,",
						"          lat = coord.lat,",
						"          aqi = list.main.aqi,",
						"          timestamp = list.dt,",
						"          co = list.components.co,",
						"          no = list.components.no,",
						"          no2 = list.components.no2,",
						"          o3 = list.components.o3,",
						"          so2 = list.components.so2,",
						"          pm2_5 = list.components.pm2_5,",
						"          pm10 = list.components.pm10,",
						"          nh3 = list.components.nh3",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> derivedColumn1",
						"derivedColumn1 filter((!isNull(corrected_timestamp))&&(!isNull(aqi))) ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, toString(corrected_timestamp)),",
						"          co = round(co,2),",
						"          no = round(no,2),",
						"          no2 = round(no2,2),",
						"          o3 = round(o3,2),",
						"          so2 = round(so2,2),",
						"          pm2_5 = round(pm2_5,2),",
						"          pm10 = round(pm10,2),",
						"          nh3 = round(nh3,2)) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          lon,",
						"          lat,",
						"          aqi,",
						"          co,",
						"          no,",
						"          no2,",
						"          o3,",
						"          so2,",
						"          pm2_5,",
						"          pm10,",
						"          nh3,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['pollution_silver.parquet'],",
						"     umask: 0770,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AirPollution')]",
				"[concat(variables('factoryId'), '/datasets/silver_pollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weather_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "HistoricalWeather",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver_weather",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[], rain as ({1h} as double))[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 foldDown(unroll(list, list),",
						"     mapColumn(",
						"          message,",
						"          cod,",
						"          city_id,",
						"          calctime,",
						"          cnt,",
						"          dt = list.dt,",
						"          main = list.main,",
						"          wind = list.wind,",
						"          clouds = list.clouds,",
						"          weather = list.weather,",
						"          rain = list.rain",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(weather, weather),",
						"     mapColumn(",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          message,",
						"          clouds_all = clouds.all,",
						"          timestamp = dt,",
						"          feels_like = main.feels_like,",
						"          humidity = main.humidity,",
						"          pressure = main.pressure,",
						"          temp = main.temp,",
						"          temp_max = main.temp_max,",
						"          temp_min = main.temp_min,",
						"          weather_description = weather.description,",
						"          weather_icon = weather.icon,",
						"          weather_id = weather.id,",
						"          weather_main = weather.main,",
						"          wind_deg = wind.deg,",
						"          wind_gust = wind.gust,",
						"          wind_speed = wind.speed,",
						"          rain_1h = rain.{1h}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston') ~> derivedColumn1",
						"derivedColumn1 filter((!isNull(corrected_timestamp))&&(!isNull(temp))&&(!isNull(humidity))) ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, toString(corrected_timestamp)),",
						"          temp_C = round(temp - 273.15, 2),",
						"          temp_min_C = round(temp_min - 273.15, 2),",
						"          temp_max_C = round(temp_max - 273.15, 2),",
						"          feels_like_C = round(feels_like - 273.15, 2),",
						"          temp_F = round((temp - 273.15) * 1.8 + 32, 2),",
						"          temp_min_F = round((temp_min - 273.15) * 1.8 + 32, 2),",
						"          temp_max_F = round((temp_max - 273.15) * 1.8 + 32, 0),",
						"          feels_like_F = round((feels_like - 273.15) * 1.8 + 32, 0),",
						"          lat = 42.3601,",
						"          lon = -71.0589,",
						"          weather_id_value = toInteger(split(toString(weather_id), ':')[1]),",
						"          weather_mail_value = split(toString(weather_main), ': ')[1],",
						"          weather_description_value = split(toString(weather_description), ': ')[1],",
						"          weather_icon_value = split(toString(weather_icon), ': ')[1],",
						"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          clouds_all,",
						"          feels_like_K = feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp_K = temp,",
						"          temp_max_K = temp_max,",
						"          temp_min_K = temp_min,",
						"          wind_deg,",
						"          wind_gust,",
						"          wind_speed,",
						"          rain_1h,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          feels_like_C,",
						"          temp_F,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          feels_like_F,",
						"          lat,",
						"          lon,",
						"          weather_id_value,",
						"          weather_mail_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ride_id as string,",
						"          rideable_type as string,",
						"          started_at as timestamp,",
						"          ended_at as timestamp,",
						"          start_station_name as string,",
						"          start_station_id as string,",
						"          end_station_name as string,",
						"          end_station_id as string,",
						"          start_lat as double,",
						"          start_lng as double,",
						"          end_lat as double,",
						"          end_lng as double,",
						"          member_casual as string,",
						"          is_bike_lost as long,",
						"          is_return_to_dock as long,",
						"          is_start_from_dock as long,",
						"          distance as double,",
						"          duration as double,",
						"          speed_ms as double,",
						"          speed_kmh as double",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['weather_silver.parquet'],",
						"     umask: 0770,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HistoricalWeather')]",
				"[concat(variables('factoryId'), '/datasets/silver_weather')]"
			]
		}
	]
}